"use client";

import { useState } from "react";
import { generateImageWithGemini } from "../lib/geminiService";

export default function GeminiImageTest() {
  const [prompt, setPrompt] = useState("");
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const imageData = await generateImageWithGemini(prompt);
      setGeneratedImage(imageData);
      if (!imageData) {
        setError("Failed to generate image. Please try a different prompt.");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="glass-card p-6">
      <h2 className="text-xl font-bold mb-4">Gemini Image Generation</h2>

      <form onSubmit={handleSubmit} className="mb-6">
        <div className="mb-4">
          <label htmlFor="prompt" className="block text-sm font-medium mb-2">
            Enter image prompt:
          </label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="w-full p-3 bg-slate-800 border border-white/20 rounded-lg"
            rows={3}
            placeholder="Describe the image you want to generate..."
          />
        </div>

        <button
          type="submit"
          disabled={isLoading || !prompt.trim()}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg disabled:opacity-50"
        >
          {isLoading ? "Generating..." : "Generate Image"}
        </button>
      </form>

      {error && (
        <div className="p-4 bg-red-500/20 border border-red-500/50 text-red-300 rounded-lg mb-4">
          {error}
        </div>
      )}

      {isLoading && (
        <div className="flex justify-center items-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      )}

      {generatedImage && (
        <div className="mt-6">
          <h3 className="text-lg font-medium mb-2">Generated Image</h3>
          <div className="border border-white/20 rounded-lg overflow-hidden">
            {/* Using img tag since this is a data URL, not a file path */}
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={generatedImage}
              alt="Generated by Gemini"
              className="w-full h-auto"
            />
          </div>
          <p className="mt-2 text-sm text-gray-400">
            Image generated based on prompt: &quot;{prompt}&quot;
          </p>
        </div>
      )}

      <div className="mt-4 text-xs text-gray-500">
        <p>
          Note: Make sure you have set the GEMINI_API_KEY environment
          variable in your .env.local file.
        </p>
        <p>
          Current API key status:{" "}
          {process.env.GEMINI_API_KEY ? "Set ✅" : "Not set ❌"}
        </p>
      </div>
    </div>
  );
}
